package com.pourhashem.oltl.oltl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;

@SuppressWarnings("deprecation")
public class Exam {
	private int bound;
	private int numberOfHours = 5, numberOfDays = 12, numberOfCourses = 18;
	private int timeInstantsPerHour = 1;
	private int [][] ccPenalty;
	private LTLFormula ltlFormula;
	private ArrayList<SoftFormula> softFormulae;

	public Exam() {
		softFormulae = new ArrayList<SoftFormula>();
		bound = numberOfHours * numberOfDays;
		ccPenalty[1][2] = ccPenalty[2][1] = 30;
		ccPenalty[1][3] = ccPenalty[3][1] = 25;
		ccPenalty[1][4] = ccPenalty[4][1] = 20;
		ccPenalty[1][5] = ccPenalty[5][1] = 15;
		ccPenalty[1][6] = ccPenalty[6][1] = 10;
		
		ltlFormula = getConfigAxioms();
		System.out.println(ltlFormula);//TODO del
	}

	public LTLFormula getConfigAxioms() {
		ArrayList<LTLFormula> system = new ArrayList<LTLFormula>();
		ArrayList<LTLFormula> init = new ArrayList<LTLFormula>();
		init.addAll(getWeekendAxioms(new Date(0, 0, 6, 0, 0), new Date(0, 0, 7, 0, 0)));
		system.addAll(getCoursesLengthAxioms());
		system.addAll(getExclusivityAxioms());

		And systemAnd = new And();
		systemAnd.addAllFormulae(system);
		And initAnd = new And();
		initAnd.addAllFormulae(init);
		And result = new And();
		result.addFormula(initAnd);
		result.addFormula(new Alw(systemAnd));
		
		return result;
	}
	
	ArrayList<LTLFormula> getWeekendAxioms(Date startDate, Date endDate) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		Or coursesOr = new Or();
		for (int crIndex = 1; crIndex <= numberOfCourses; crIndex++)
			coursesOr.addFormula(getCRPredicate(crIndex));
		Not nothing = new Not(coursesOr);
		int startTime = numberOfHours * (startDate.getDate() - 1);
		int endTime = numberOfHours * endDate.getDate() - 1;
		for (int time = startTime; time <= endTime; time++)
			result.add(getNestedNexts(nothing, time));
		return result;
	}
	
	LTLFormula getNestedNexts(LTLFormula ltlFormula, int time) {
		assert (time >= 0);
		if (time == 0)
			return ltlFormula;
		if (time == 1)
			return new Next(ltlFormula);
		
		return new Next(getNestedNexts(ltlFormula, time - 1));
	}

	public String getOLTLScript() {
		String script = "Bound:" + bound + "\n";
		script += "Formula:\n" + ltlFormula + "\n";
		if (softFormulae.size() > 0) {
			script += "SoftFormulae:\n";
			for (SoftFormula sf : softFormulae) {
				script += sf + "\n";
			}
		}
		
		return script;
	}
	
	public Predicate getCRPredicate(int crIndex) {
		return new Predicate("CR" + crIndex);
	}
	
	/*(defun once (ev)
			(&&
				(som ev)
				(alw (-> ev (alwf_e (!! ev))))))*/
	public ArrayList<LTLFormula> getOnce(LTLFormula f) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.add(new Som(f));
		result.add(new Alw(new Impl(f, new Next(new AlwF(new Not(f))))));
		return result;
	}
	
	/*(defun onceAndLength (ev length)
	(case length
		((2)
			(&& (som ev)
				(alw (-> (&& (!! (yesterday ev)) ev) (next (&& ev (next (alwf (!! ev)))))))))
		((3)
			(&& (som ev)
				(alw (-> (&& (!! (yesterday ev)) ev) (next (&& ev (next (&& ev (next (alwf (!! ev)))))))))))
		((4)
			(&& (som ev)
				(alw (-> (&& (!! (yesterday ev)) ev) (next (&& ev (next (&& ev (next (&& ev (next (alwf (!! ev)))))))))))))))*/
	public ArrayList<LTLFormula> getOnceAndLength(LTLFormula f, int length) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		if (length == 1)
			return getOnce(f);
		result.add(new Som(f));
		result.add(new Alw(new Impl(new And(new Not(new Yesterday(f)), f), getOnceAndLengthRec(f, length))));
		return result;
	}
	private LTLFormula getOnceAndLengthRec(LTLFormula f, int length) {
		if (length == 2)
			return new Next(new And(f, new Next(new AlwF(new Not(f)))));
		else if (length > 2)
			return new Next(new And(f, getOnceAndLengthRec(f, length - 1)));
		return null;
	}
	
	ArrayList<LTLFormula> getExclusivity(ArrayList<LTLFormula> formulae) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		if (formulae.size() == 2) {
			result.add(new Not(new And(formulae.get(0), formulae.get(1))));
			return result;
		} else if (formulae.size() > 2)
			for (int fIndex = 0; fIndex < formulae.size(); fIndex++) {
				Or orOtherFe = new Or();
				for (int otherFIndex = 0; otherFIndex < formulae.size(); otherFIndex++)
					if (otherFIndex != fIndex)
						orOtherFe.addFormula(formulae.get(otherFIndex));
				result.add(new Impl(formulae.get(fIndex), new Not(orOtherFe)));
			}
		
		return result;
	}
	

	private ArrayList<LTLFormula> getExclusivityAxioms() {
		ArrayList<LTLFormula> coursesP = new ArrayList<LTLFormula>();
		for (int crIndex = 1; crIndex <= numberOfCourses; crIndex++)
			coursesP.add(getCRPredicate(crIndex));
		return getExclusivity(coursesP);
	}

	/*
	 * (onceAndLength (-p- spc1) 4) (onceAndLength (-p- spc2) 3)
	 * (onceAndLength (-p- spc3) 3) (onceAndLength (-p- spc4) 2) (onceAndLength (-p- spc5) 4)
	 * (onceAndLength (-p- spc6) 2) (onceAndLength (-p- spc7) 3) (onceAndLength (-p- spc8) 4)
	 */
	private ArrayList<LTLFormula> getCoursesLengthAxioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.addAll(getOnceAndLength(getCRPredicate(1), 2));
		result.addAll(getOnceAndLength(getCRPredicate(2), 2));
		result.addAll(getOnceAndLength(getCRPredicate(3), 2));
		result.addAll(getOnceAndLength(getCRPredicate(4), 2));
		result.addAll(getOnceAndLength(getCRPredicate(5), 1));
		result.addAll(getOnceAndLength(getCRPredicate(6), 1));
		result.addAll(getOnceAndLength(getCRPredicate(7), 1));
		result.addAll(getOnceAndLength(getCRPredicate(8), 2));
		result.addAll(getOnceAndLength(getCRPredicate(9), 2));
		result.addAll(getOnceAndLength(getCRPredicate(10), 2));
		result.addAll(getOnceAndLength(getCRPredicate(11), 2));
		result.addAll(getOnceAndLength(getCRPredicate(12), 1));
		result.addAll(getOnceAndLength(getCRPredicate(13), 1));
		result.addAll(getOnceAndLength(getCRPredicate(14), 1));
		result.addAll(getOnceAndLength(getCRPredicate(15), 2));
		result.addAll(getOnceAndLength(getCRPredicate(16), 2));
		result.addAll(getOnceAndLength(getCRPredicate(17), 2));
		result.addAll(getOnceAndLength(getCRPredicate(18), 2));
		return result;
	}
	
}