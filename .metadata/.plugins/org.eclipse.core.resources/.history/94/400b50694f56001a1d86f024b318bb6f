/**
 * @author Mohammad Mehdi Pourhashem Kallehbasti
 */

package com.pourhashem.oltl.oltl;

import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;

//	To add a surgery check out #AddSurgery

@SuppressWarnings("deprecation")
public class OperatingRoom {
	private final int bound;
	private final int softBound;
	private final int numberOfORs, numberOfSurgeons, numberOfSurgeries;
	private final Date startTime = new Date(0, 0, 0, 8, 0);
//	private final Date shiftEndTime = new Date(0, 0, 0, 21, 0);
	private final Date shiftEndTime = new Date(0, 0, 0, 19, 0);
	private final Date endTime = new Date(0, 0, 0, 24, 0);
	
	private final int noOverTimeSNPenalty = 2; //for every SN working overtime for an hour
	private final int noIdleORPenalty = 4; //for every OR being idle for an hour
	private final int noWaitingSNPenalty = 5; //for every SN waiting for an hour
	private final int SR4PrecedesSR3Penalty = 10; //if SR4 follows SR3 it has this much penalty
	
	private final int timeInstantsPerHour = 1;
	private LTLFormula ltlFormula;
	private Predicate shiftEndP = new Predicate("ShiftEnd");
	private ArrayList<SoftFormula> softFormulae;

	public OperatingRoom() {
		softFormulae = new ArrayList<SoftFormula>();
		this.softBound = getCeilTimeInstant(endTime) - getTimeInstant(startTime);
		this.bound = softBound + 3;
		numberOfORs = 3;
		numberOfSurgeons = 4;
		//#AddSurgery
		numberOfSurgeries = 6;
		ltlFormula = getConfigAxioms();
		System.out.println(getOLTLScript());//TODO del
	}

	public LTLFormula getConfigAxioms() {
		ArrayList<LTLFormula> system = new ArrayList<LTLFormula>();
		ArrayList<LTLFormula> init = new ArrayList<LTLFormula>();
//		system.addAll(getNoSpeechIn(new Date(0,0,0,8,0), new Date(0,0,0,9,0), 1));
//		system.addAll(getNoSpeechIn(new Date(0,0,0,15,0), new Date(0,0,0,17,0), 1));
//		system.add(getSNDoesNotLikeTI(8, new Date(0,0,0,15,0), new Date(0,0,0,17,0), 1));
		system.add(new Som(new Predicate("SoftSR4PrecedesSR3")));
		init.add(getNestedNexts(shiftEndP, getCeilTimeInstant(shiftEndTime) - getTimeInstant(startTime)));
		system.addAll(getNoSRAfterEndTime());
		system.addAll(getGeneralAxioms());
		system.addAll(getSurgeonsSurgeriesAxioms());
		system.addAll(getSR1Axioms());
		system.addAll(getSR2Axioms());
		system.addAll(getSR3Axioms());
		system.addAll(getSR4Axioms());
		system.addAll(getSR5Axioms());
		//#AddSurgery
		system.addAll(getSR6Axioms());

		system.add(new Som(getSRPredicate(1)));
		system.add(new Som(getSRPredicate(2)));
		system.add(new Som(getSRPredicate(3)));
		system.add(new Som(getSRPredicate(4)));
		system.add(new Som(getSRPredicate(5)));
		//#AddSurgery
		system.add(new Som(getSRPredicate(6)));

		system.addAll(getNoConsequentSRsForAnySN5HoursOrMore());
		
		system.addAll(getSoftNoOverTimeSN());
		system.addAll(getSoftNoIdleOr());
		system.addAll(getSoftNoWaitingSN());
		system.addAll(getSoftSR4PrecedesSR3());
		
//		system.add(new Not(new Som(new Or( /*getSRPredicate(2), getSRPredicate(3),*/ getSRPredicate(4)))));

//		system.add(new Som(getORSRPredicate(1,1)));//TODO del ***888 test various violations like (som (&& or1sr1 or2sr2))
//		system.add(new Som(getORSRPredicate(3,2)));//TODO del
		
		And systemAnd = new And();
		systemAnd.addAll(system);
		And result = new And();
		if (init.size() > 0) {
			And initAnd = new And();
			initAnd.addAll(init);
			result.add(initAnd);
		}
		result.add(new Alw(systemAnd));
		
		return result;
	}

	public String getOLTLScript() {
		String script = "Bound:" + bound + "\n";
		script += "SoftBound:" + softBound + "\n";
		script += "Formula:\n" + ltlFormula + "\n";
		script += "SoftFormulae:\n";
		for (SoftFormula sf : softFormulae) {
			script += sf + "\n";
		}
		
		return script;
	}
	
	public Predicate getORPredicate(int orIndex) {
		return new Predicate("OR" + orIndex);
	}
	
	public Predicate getSRPredicate(int srIndex) {
		return new Predicate("SR" + srIndex);
	}

	public Predicate getSNPredicate(int snIndex) {
if (snIndex>4)
	return new Predicate("SN" + snIndex);
		return new Predicate("SN" + snIndex);
	}

	public Predicate getORSNPredicate(int orIndex, int snIndex) {
		if (snIndex>4)
			return new Predicate("SN" + snIndex);
		return new Predicate("OR" + orIndex + "SN" + snIndex);
	}

	public Predicate getORSRPredicate(int orIndex, int srIndex) {
		return new Predicate("OR" + orIndex + "SR" + srIndex);
	}
	
	public Predicate getORSRPPredicate(int orIndex, int srIndex) {
		return new Predicate("OR" + orIndex + "SR" + srIndex + "P");
	}
	
	public Predicate getORSRCPredicate(int orIndex, int srIndex) {
		return new Predicate("OR" + orIndex + "SR" + srIndex + "C");
	}
	
	/*Bidirectional (not concurrent) Order
  	(&&
	  (-> f1 (next (until (!! f1) f2)))
	  (-> f2 (yesterday (since (!! f2) f1)))
	  (-> f1 (!! f2)))*/
	public ArrayList<LTLFormula> getBDOrder(LTLFormula f1, LTLFormula f2) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.add(new Impl(f1, new Next(new Until(new Not(f1), f2))));
		result.add(new Impl(f2, new Yesterday(new Since(new Not(f2), f1))));
		result.add(new Impl(f1, new Not(f2)));
		
		return result;
	}
	
	/*Bidirectional Next
	  (<-> f1 (next f2))
	  */
	public ArrayList<LTLFormula> getBDNext(LTLFormula f1, LTLFormula f2) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.add(new Iff(f1, new Next(f2)));
		
		return result;
	}
	
	/*Border (&&
	  (<-> module (&& (somp start) (somf end)))
	  (-> (|| start end) module))
	  */
	public ArrayList<LTLFormula> getBorders(LTLFormula module, LTLFormula start, LTLFormula end) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.add(new Iff(module, new And(new SomP(start), new SomF(end))));
		result.add(new Impl(new Or(start, end), module));
		
		return result;
	}
	
	/*Coincidence
	  (<-> f1 f2)
	  */
	public ArrayList<LTLFormula> getCoincidence(LTLFormula f1, LTLFormula f2) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		
		result.add(new Iff(f1, f2));
		return result;
	}

	/*(defun once (ev)
			(&&
				(som ev)
				(alw (-> ev (alwf_e (!! ev))))))*/
	public ArrayList<LTLFormula> getOnce(LTLFormula f) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.add(new Som(f));
		result.add(new Alw(new Impl(f, new Next(new AlwF(new Not(f))))));
		return result;
	}
	
	/*(defun onceAndLength (ev length)
	(case length
		((2)
			(&& (som ev)
				(alw (-> (&& (!! (yesterday ev)) ev) (next (&& ev (next (alwf (!! ev)))))))))
		((3)
			(&& (som ev)
				(alw (-> (&& (!! (yesterday ev)) ev) (next (&& ev (next (&& ev (next (alwf (!! ev)))))))))))
		((4)
			(&& (som ev)
				(alw (-> (&& (!! (yesterday ev)) ev) (next (&& ev (next (&& ev (next (&& ev (next (alwf (!! ev)))))))))))))))*/
	public ArrayList<LTLFormula> getOnceWithLength(LTLFormula f, int length) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		if (length == 1)
			return getOnce(f);
		result.add(new Som(f));
		result.add(new Alw(new Impl(new And(new Not(new Yesterday(f)), f), getOnceWithLengthRec(f, length))));
		return result;
	}
	private LTLFormula getOnceWithLengthRec(LTLFormula f, int length) {
		if (length == 2)
			return new Next(new And(f, new Next(new AlwF(new Not(f)))));
		else if (length > 2)
			return new Next(new And(f, getOnceWithLengthRec(f, length - 1)));
		return null;
	}
	
	LTLFormula getNestedNexts(LTLFormula ltlFormula, int time) {
		assert (time >= 0);
		if (time == 0)
			return ltlFormula;
		if (time == 1)
			return new Next(ltlFormula);
		
		return new Next(getNestedNexts(ltlFormula, time - 1));
	}
	
	ArrayList<LTLFormula> getExclusivity(ArrayList<LTLFormula> formulae) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		if (formulae.size() == 2) {
			result.add(new Not(new And(formulae.get(0), formulae.get(1))));
			return result;
		} else if (formulae.size() > 2)
			for (int fIndex = 0; fIndex < formulae.size(); fIndex++) {
				Or orOtherFe = new Or();
				for (int otherFIndex = 0; otherFIndex < formulae.size(); otherFIndex++)
					if (otherFIndex != fIndex)
						orOtherFe.add(formulae.get(otherFIndex));
				result.add(new Impl(formulae.get(fIndex), new Not(orOtherFe)));
			}
		
		return result;
	}
	
	/* (defun noTalkOn (i)
		(futr (!! (|| (-p- spc1) (-p- spc2) (-p- spc3) (-p- spc4) (-p- spc5) (-p- spc6) (-p- spc7) (-p- spc8))) i))
	 */
	public LTLFormula getNoSpeechAtTI(int timeInstant) {
		assert(timeInstant >= 0);
		if (timeInstant == 0) {
			Or speechesOr = new Or();
			for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++)
				speechesOr.add(getSRPredicate(srIndex));
			return new Not(speechesOr);
		}
		else
			return new Next(getNoSpeechAtTI(timeInstant - 1));
	}
	
	@SuppressWarnings("deprecation")
	public int getTimeInstant(Date time) {
		return (int) (getDateDiff(startTime, time, TimeUnit.MINUTES) / (60.0 / timeInstantsPerHour));
	}
	
	@SuppressWarnings("deprecation")
	public int getCeilTimeInstant(Date time) {
		return (int) Math.ceil(getDateDiff(startTime, time, TimeUnit.MINUTES) / (60.0 / timeInstantsPerHour));
	}
	
	public static long getDateDiff(Date date1, Date date2, TimeUnit timeUnit) {
		long diffInMillies = date2.getTime() - date1.getTime();
		return timeUnit.convert(diffInMillies, TimeUnit.MILLISECONDS);
	}

	/*
	 * ; (AS (@ (!! (-p- p1)) 0) 1); p1 doesn't like 0800-0830
		(assert-soft (= ((_ extract 0 0) p1) #b0) :id personTimeSlot :weight 1)
	 */
	LTLFormula getSNDoesNotLikeTI(int atIndex, Date startTime, Date endTime, double weight) {
		float fWeight = (float) weight;
		Predicate atAP = new Predicate("soft_notAT" + atIndex + "time");
		for (int time = getTimeInstant(startTime); time < getCeilTimeInstant(endTime); time++)
			softFormulae.add(new SoftAt(atAP, time, fWeight));

		return new Iff(atAP, new Not(getSNPredicate(atIndex)));
	}
	
	/*
	 *  (<-> (-p- Soft_NoSC1) (!! (-p- sc1)))
	 *  (<-> (-p- Soft_NoSC2) (!! (-p- sc2)))
	 *  ...
	 * ; (AS (@ (-p- Soft_NoSC1) 0) 8); doesn't like 0800-0830
	 * ; (AS (@ (-p- Soft_NoSC2) 0) 8); doesn't like 0800-0830
	 */
	ArrayList<LTLFormula> getNoSpeechIn(Date startTime, Date endTime, double weight) {
		float fWeight = (float) weight;
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++) {
			Predicate softNoSCAP = new Predicate("soft_NoSC" + srIndex);
			for (int time = getTimeInstant(startTime); time < getCeilTimeInstant(endTime); time++)
				softFormulae.add(new SoftAt(softNoSCAP, time, fWeight));

			result.add(new Iff(softNoSCAP, new Not(getSRPredicate(srIndex))));
		}
		
		return result;
	}
	
	ArrayList<SoftFormula> getSoftFormulae() {
		return softFormulae;
	}

	/*
SR1P	SR1P	SN1	(SN1 SN2)	SN1	SR1C	
SR2P	SR2P	SN2	SN2	SN2	SR2C	
SR3P	SN3	SN3 SN4	(SN3 SN4)	SN3	SR3C	SR3C
SR4P	SN4	SN4	SN4	SR4C	SR4C	
SR5P	SN1	SN1	SN1	SR5C		
SR6P	SN3	SN3	SN3	SR6C		*///#AddSurgery
	ArrayList<LTLFormula> getSurgeonsSurgeriesAxioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.addAll(getSurgeonsSurgeries(1, 1, 5));
		result.addAll(getSurgeonsSurgeries(2, 1, 2));
		result.addAll(getSurgeonsSurgeries(3, 3, 6));
		result.addAll(getSurgeonsSurgeries(4, 3, 4));
		//#AddSurgery
		
		return result;
	}
	/* 
	 * FAhl(FAsk(<-> hlsk ORscOfSk(hlsc)))
	 */
	private ArrayList<LTLFormula> getSurgeonsSurgeries(int ... skScs) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		assert (skScs.length > 1);
		for (int hlIndex = 1; hlIndex <= numberOfORs; hlIndex++) {
			Or speechesOr = new Or();
			for (int scIndex = 1; scIndex < skScs.length; scIndex++) {
				speechesOr.add(getORSRPredicate(hlIndex, skScs[scIndex]));
			}
			result.add(new Impl(getORSNPredicate(hlIndex, skScs[0]), speechesOr));
		}
		
		return result;
	}
	
	/*//SN in a single OR
	 * (&& (i allOR) (&& (j allSN)
		  (-> (-p- oriSNj) (notOtherOriSNj(i)))*/
	ArrayList<LTLFormula> getSNInSingleOR() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++)
				result.add(new Impl(getORSNPredicate(orIndex, snIndex), getNotOtherORForSN(orIndex, snIndex)));
			for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++)
				result.addAll(getBorders(getORSRPredicate(orIndex, srIndex), getORSRPPredicate(orIndex, srIndex),getORSRCPredicate(orIndex, srIndex)));
		}

		return result;
	}
	
	/*
	 * (<-> SN1 (|| or1SN1 or2SN1 or3SN1))
	 */
	ArrayList<LTLFormula> getSurgeonsDefinition() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++) {
			Or orsSNsOr = new Or();
			for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
				orsSNsOr.add(getORSNPredicate(orIndex, snIndex));
			}
			result.add(new Iff(getSNPredicate(snIndex), orsSNsOr));
		}
		
		return result;
	}
	
	/*
	 * (<-> SR1 (|| or1SR1 or2SR1 or3SR1))
	 */
	ArrayList<LTLFormula> getSurgeriesDefinition() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++) {
			Or orsSROr = new Or();
			for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
				orsSROr.add(getORSRPredicate(orIndex, srIndex));
			}
			result.add(new Iff(getSRPredicate(srIndex), orsSROr));
		}
		
		return result;
	}
	
	// SR in a single OR
	// (-> (-p- oriSR1) (notGOtherOR(i)))
	// only one SR in a single OR
	// (-> (-p- oriSR1) (notOtherSRs(i, 1)))
	ArrayList<LTLFormula> getORSRRelation() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++)
			for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
				result.add(new Impl(getORSRPredicate(orIndex, srIndex), getGNotOtherORs(srIndex, orIndex)));
				result.add(new Impl(getORSRPredicate(orIndex, srIndex), getNotOtherSRs(orIndex, srIndex)));
			}

		return result;
	}
	
	LTLFormula getNotOtherSNs(int snIndex, int orIndex) {
		Or or = new Or();
		for (int snIndexCounter = 1; snIndexCounter <= numberOfSurgeons; snIndexCounter++)
			if (snIndexCounter != snIndex)
				or.add(getORSNPredicate(orIndex, snIndexCounter));

		return new Not(or);
	}
	
	LTLFormula getNotOtherSNs(int snIndex1, int snIndex2, int orIndex) {
		Or or = new Or();
		for (int snIndexCounter = 1; snIndexCounter <= numberOfSurgeons; snIndexCounter++)
			if (snIndexCounter != snIndex1 && snIndexCounter != snIndex2)
				or.add(getORSNPredicate(orIndex, snIndexCounter));

		return new Not(or);
	}
	
	LTLFormula getGNotOtherORs(int srIndex, int orIndex) {
		Or or = new Or();
		for (int orIndexCounter = 1; orIndexCounter <= numberOfORs; orIndexCounter++)
			if (orIndexCounter != orIndex)
				or.add(getORSRPredicate(orIndexCounter, srIndex));

		return new Not(new Som(or));
	}
	
	LTLFormula getNotOtherSRs(int orIndex, int srIndex) {
		Or or = new Or();
		for (int srIndexCounter = 1; srIndexCounter <= numberOfSurgeries; srIndexCounter++)
			if (srIndexCounter != srIndex)
				or.add(getORSRPredicate(orIndex, srIndexCounter));

		return new Not(or);
	}


	LTLFormula getNotAnySN() {
		Or or = new Or();
		for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++)
			or.add(getSNPredicate(snIndex));

		return new Not(or);
	}
	
	LTLFormula getNotAnyORiSN(int orIndex) {
		Or or = new Or();
		for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++)
			or.add(getORSNPredicate(orIndex, snIndex));

		return new Not(or);
	}
	
	/*
SR1P	SR1P	SN1	(SN1 SN2)	SN1	SR1C	
SR2P	SR2P	SN2	SN2	SN2	SR2C	
SR3P	SN3	SN3 SN4	(SN3 SN4)	SN3	SR3C	SR3C
SR4P	SN4	SN4	SN4	SR4C	SR4C	
SR5P	SN1	SN1	SN1	SR5C		
SR6P	SN3	SN3	SN3	SR6C		//#AddSurgery
 //SN in a single OR
  * (&& (i allOR) (&& (j allSN)
  (-> (-p- oriSNj) (notOtherOriSNj(i)))
  //no unwanted SNs
   
))
	 */
	private ArrayList<LTLFormula> getGeneralAxioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		result.addAll(getOnceWithLength(shiftEndP, 1));
		result.addAll(getSNInSingleOR());
		result.addAll(getSurgeonsDefinition());
		result.addAll(getSurgeriesDefinition());
		result.addAll(getORSRRelation());
		

		return result;
	}

	private LTLFormula getNotOtherORForSN(int orIndex, int snIndex) {
		Or or = new Or();
		for (int orIndexCounter = 1; orIndexCounter <= numberOfORs; orIndexCounter++)
			if (orIndex != orIndexCounter)
				or.add(getORSNPredicate(orIndexCounter, snIndex));

		return new Not(or);		
	}
	
	/*SR1P	SR1P	SN1	(SN1 SN2)	SN1	SR1C	
	*/
	private ArrayList<LTLFormula> getSR1Axioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		int srIndex = 1;
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			And and = new And();
			Predicate oriSRP = getORSRPPredicate(orIndex, srIndex);
			Predicate oriSR = getORSRPredicate(orIndex, srIndex);
			Predicate oriSRC = getORSRCPredicate(orIndex, srIndex);
			LTLFormula oriSN1 = new And(oriSR, getORSNPredicate(orIndex, 1));
			LTLFormula oriSN2 = new And(oriSR, getORSNPredicate(orIndex, 2));

			and.addAll(getOnceWithLength(oriSRP, 2));
			and.addAll(getOnceWithLength(oriSN1, 3));
			and.addAll(getOnceWithLength(oriSN2, 1));
			and.addAll(getOnceWithLength(oriSRC, 1));
			
			and.addAll(getCoincidence(new And(new Not(new Yesterday(oriSR)), oriSR), new And(oriSRP, new Next(oriSRP))));
			and.addAll(getBDOrder(new And(oriSRP, new Yesterday(oriSRP)), new And(oriSN1, new Yesterday(new Not(oriSN1)))));
			and.addAll(getCoincidence(new Yesterday(new And(oriSN1, new Yesterday(new Not(oriSN1)))), oriSN2));
			and.addAll(getBDOrder(new And(oriSN1, new Next(new Not(oriSN1))), oriSRC));
			result.add(new Impl(oriSR, and));
		}

		return result;
	}

	/*SR2P	SR2P	SN2	SN2	SN2	SR2C
	*/
	private ArrayList<LTLFormula> getSR2Axioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		int srIndex = 2;
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			And and = new And();
			Predicate oriSRP = getORSRPPredicate(orIndex, srIndex);
			Predicate oriSR = getORSRPredicate(orIndex, srIndex);
			Predicate oriSRC = getORSRCPredicate(orIndex, srIndex);
			LTLFormula oriSN2 = new And(oriSR, getORSNPredicate(orIndex, 2));

			and.addAll(getOnceWithLength(oriSRP, 2));
			and.addAll(getOnceWithLength(oriSN2, 3));
			and.addAll(getOnceWithLength(oriSRC, 1));
			
			and.addAll(getCoincidence(new And(new Not(new Yesterday(oriSR)), oriSR), new And(oriSRP, new Next(oriSRP))));
			and.addAll(getBDOrder(new And(oriSRP, new Yesterday(oriSRP)), new And(oriSN2, new Yesterday(new Not(oriSN2)))));
			and.addAll(getBDOrder(new And(oriSN2, new Next(new Not(oriSN2))), oriSRC));
			result.add(new Impl(oriSR, and));
		}

		return result;
	}

	/*SR3P	SN3	(SN3 SN4)	(SN3 SN4)	SN3	SR3C	SR3C
	*/
	private ArrayList<LTLFormula> getSR3Axioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		int srIndex = 3;
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			And and = new And();
			Predicate oriSRP = getORSRPPredicate(orIndex, srIndex);
			Predicate oriSR = getORSRPredicate(orIndex, srIndex);
			Predicate oriSRC = getORSRCPredicate(orIndex, srIndex);
			LTLFormula oriSN3 = new And(oriSR, getORSNPredicate(orIndex, 3));
			LTLFormula oriSN4 = new And(oriSR, getORSNPredicate(orIndex, 4));

			and.addAll(getOnceWithLength(oriSRP, 1));
			and.addAll(getOnceWithLength(oriSN3, 4));
			and.addAll(getOnceWithLength(oriSN4, 2));
			and.addAll(getOnceWithLength(oriSRC, 2));
			
			and.addAll(getCoincidence(new And(new Not(new Yesterday(oriSR)), oriSR), oriSRP));
			and.addAll(getBDOrder(oriSRP, new And(oriSN3, new Yesterday(new Not(oriSN3)))));
			and.addAll(getCoincidence(new And(oriSN3, new Yesterday(new And(oriSN3, new Not(new Yesterday(oriSN3))))), 
					new And(oriSN4, new Not(new Yesterday(oriSN4)))));
			and.addAll(getBDOrder(new And(oriSN3, new Next(new Not(oriSN3))), new And(oriSRC, new Next(oriSRC))));
			result.add(new Impl(oriSR, and));
		}

		return result;
	}
	
	/*SR4P	SN4	SN4	SN4	SR4C	SR4C	
	*/
	private ArrayList<LTLFormula> getSR4Axioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		int srIndex = 4;
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			And and = new And();
			Predicate oriSRP = getORSRPPredicate(orIndex, srIndex);
			Predicate oriSR = getORSRPredicate(orIndex, srIndex);
			Predicate oriSRC = getORSRCPredicate(orIndex, srIndex);
			LTLFormula oriSN4 = new And(oriSR, getORSNPredicate(orIndex, 4));

			and.addAll(getOnceWithLength(oriSRP, 1));
			and.addAll(getOnceWithLength(oriSN4, 3));
			and.addAll(getOnceWithLength(oriSRC, 2));
			
			and.addAll(getCoincidence(new And(new Not(new Yesterday(oriSR)), oriSR), oriSRP));
			and.addAll(getBDOrder(oriSRP, new And(oriSN4, new Yesterday(new Not(oriSN4)))));
			and.addAll(getBDOrder(new And(oriSN4, new Next(new Not(oriSN4))), new And(oriSRC, new Next(oriSRC))));
			result.add(new Impl(oriSR, and));
		}

		return result;
	}

	/*SR5P	SN1	SN1	SN1	SR5C
	*/
	private ArrayList<LTLFormula> getSR5Axioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		int srIndex = 5;
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			And and = new And();
			Predicate oriSRP = getORSRPPredicate(orIndex, srIndex);
			Predicate oriSR = getORSRPredicate(orIndex, srIndex);
			Predicate oriSRC = getORSRCPredicate(orIndex, srIndex);
			LTLFormula oriSN1 = new And(oriSR, getORSNPredicate(orIndex, 1));

			and.addAll(getOnceWithLength(oriSRP, 1));
			and.addAll(getOnceWithLength(oriSN1, 3));
			and.addAll(getOnceWithLength(oriSRC, 1));
			
			and.addAll(getCoincidence(new And(new Not(new Yesterday(oriSR)), oriSR), oriSRP));
			and.addAll(getBDOrder(oriSRP, new And(oriSN1, new Yesterday(new Not(oriSN1)))));
			and.addAll(getBDOrder(new And(oriSN1, new Next(new Not(oriSN1))), oriSRC));
			result.add(new Impl(oriSR, and));
		}

		return result;
	}

	/*SR6P	SN3	SN3	SN3	SR6C
	*/
	private ArrayList<LTLFormula> getSR6Axioms() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		int srIndex = 6;
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			And and = new And();
			Predicate oriSRP = getORSRPPredicate(orIndex, srIndex);
			Predicate oriSR = getORSRPredicate(orIndex, srIndex);
			Predicate oriSRC = getORSRCPredicate(orIndex, srIndex);
			LTLFormula oriSN3 = new And(oriSR, getORSNPredicate(orIndex, 3));

			and.addAll(getOnceWithLength(oriSRP, 1));
			and.addAll(getOnceWithLength(oriSN3, 3));
			and.addAll(getOnceWithLength(oriSRC, 1));
			
			and.addAll(getCoincidence(new And(new Not(new Yesterday(oriSR)), oriSR), oriSRP));
			and.addAll(getBDOrder(oriSRP, new And(oriSN3, new Yesterday(new Not(oriSN3)))));
			and.addAll(getBDOrder(new And(oriSN3, new Next(new Not(oriSN3))), oriSRC));
			result.add(new Impl(oriSR, and));
		}

		return result;
	}

	
	private ArrayList<LTLFormula> getNoSRAfterEndTime() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		Or or = new Or();
		for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++)
			or.add(getSRPredicate(srIndex));
		result.add(new Impl(shiftEndP, getNestedNexts(new AlwF(new Not(or)), 3)));

		return result;
	}
	
	private ArrayList<LTLFormula> getNoConsequentSRsForAnySN5HoursOrMore() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++) {
			Predicate sni = getSNPredicate(snIndex);
			result.add(new Not(new And(sni, new Next(new And(sni, new Next(new And(sni, new Next(new And(sni, new Next(sni))))))))));
		}

		return result;
	}
	
	/*SR1P	SR1P	SN1	(SN1 SN2)	SN1	SR1C	
SR2P	SR2P	SN2	SN2	SN2	SR2C	
SR3P	SN3	SN3 SN4	(SN3 SN4)	SN3	SR3C	SR3C
SR4P	SN4	SN4	SN4	SR4C	SR4C	
SR5P	SN1	SN1	SN1	SR5C		
SR6P	SN3	SN3	SN3	SR6C		
//#AddSurgery
*/

	private ArrayList<LTLFormula> getSRRelatedPredicates(int orIndex, int srIndex) {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		switch (srIndex) {
		case 1:
			result.add(getORSRPPredicate(orIndex, srIndex));
			result.add(getORSRCPredicate(orIndex, srIndex));
			result.add(getORSNPredicate(orIndex, 1));
			break;
		case 2:
			result.add(getORSRPPredicate(orIndex, srIndex));
			result.add(getORSRCPredicate(orIndex, srIndex));
			result.add(getORSNPredicate(orIndex, 1));
			result.add(getORSNPredicate(orIndex, 2));
			break;
		case 3:
			result.add(getORSRPPredicate(orIndex, srIndex));
			result.add(getORSRCPredicate(orIndex, srIndex));
			result.add(getORSNPredicate(orIndex, 3));
			result.add(getORSNPredicate(orIndex, 4));
			break;
		case 4:
			result.add(getORSRPPredicate(orIndex, srIndex));
			result.add(getORSRCPredicate(orIndex, srIndex));
			result.add(getORSNPredicate(orIndex, 4));
			break;
		case 5:
			result.add(getORSRPPredicate(orIndex, srIndex));
			result.add(getORSRCPredicate(orIndex, srIndex));
			result.add(getORSNPredicate(orIndex, 1));
			break;
		case 6:
			result.add(getORSRPPredicate(orIndex, srIndex));
			result.add(getORSRCPredicate(orIndex, srIndex));
			result.add(getORSNPredicate(orIndex, 3));
			break;

		default:
			break;
		}

		return result;
	}
	/* (<-> softNoOverTimeSN
	 *		(!! (&& (somp ShiftEnd) (somf sn1)))
	 *(soft softNoOverTimeSN overTimeSNPenalty)
	 */
	private ArrayList<LTLFormula> getSoftNoOverTimeSN() { //can be optimized, using softAt @13 @14 @15, instead of softAll.
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		Predicate softNoOverTimeSNP = new Predicate("SoftNoOverTimeSN");
		for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++)
			result.add(new Iff(softNoOverTimeSNP, new Not(new And(new SomP(shiftEndP), new SomF(getSNPredicate(snIndex))))));
		softFormulae.add(new SoftAll(softNoOverTimeSNP, noOverTimeSNPenalty));
		
		return result;
	}
	
	/* (&& (i allOR)
		 (<-> softNoIdleOri
		 	(&& (j allSR)
		 		(-> oriSRj (|| orianyPostfix)))))
		 (soft softNoIdleOri noIdleORPenalty))
	 */
	private ArrayList<LTLFormula> getSoftNoIdleOr() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int orIndex = 1; orIndex <= numberOfORs; orIndex++) {
			Predicate softNoIdleOriP = new Predicate("SoftNoIdleOr" + orIndex);
			And and = new And();
			for (int srIndex = 1; srIndex <= numberOfSurgeries; srIndex++)
				and.add(new Impl(getORSRPredicate(orIndex, srIndex), (new Or(getSRRelatedPredicates(orIndex, srIndex)))));
			result.add(new Iff(softNoIdleOriP, and));
			softFormulae.add(new SoftAll(softNoIdleOriP, noIdleORPenalty));
		}
		
		return result;
	}
	
	/*
	 * (&& (i allSN) (<-> softNoWaitingSNi
	 * (!! (&& (!! sni) (yesterday (somp sni)) (next (somf sni)))))
	 * 
	 * (soft softNoWaitingSNi noWaitingSNPenalty))
	 */
	private ArrayList<LTLFormula> getSoftNoWaitingSN() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
		for (int snIndex = 1; snIndex <= numberOfSurgeons; snIndex++) {
			Predicate softNoWaitingSNiP = new Predicate("SoftNoWaitingSN" + snIndex);
			Predicate sni = getSNPredicate(snIndex);
			result.add(new Iff(softNoWaitingSNiP, new Not(new And(new Not(sni), new Yesterday(new SomP(sni)), new Next(new SomF(sni))))));
			softFormulae.add(new SoftAll(softNoWaitingSNiP, noWaitingSNPenalty));
		}

		return result;
	}
	
	/*
	 * (<-> softSR4PrecedesSR3
	 * 		(alw (-> (&& SR3 SN4) (!! (somf (&& SR4 SN4))))))
	 * 
	 * (soft softSR4PrecedesSR3 sr4PrecedesSR3Penalty))
	 */
	private ArrayList<LTLFormula> getSoftSR4PrecedesSR3() {
		ArrayList<LTLFormula> result = new ArrayList<LTLFormula>();
			Predicate softSR4PrecedesSR3 = new Predicate("SoftSR4PrecedesSR3");
			Predicate sn4 = getSNPredicate(4);
			Predicate sr3 = getSRPredicate(3);
			Predicate sr4 = getSRPredicate(4);
			result.add(new Iff(softSR4PrecedesSR3, new Alw(new Impl(new And(sr3, sn4), new Not(new SomF(new And(sr4, sn4)))))));
			softFormulae.add(new SoftAt(softSR4PrecedesSR3, 0, SR4PrecedesSR3Penalty));

		return result;
	}

}