/*
 * generated by Xtext 2.10.0
 */
package com.pourhashem.xtext.oltl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OltlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.Model");
		private final Assignment cTempFormulaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTempFormulaTempFormulaParserRuleCall_0 = (RuleCall)cTempFormulaAssignment.eContents().get(0);
		
		//Model:
		//	tempFormula=TempFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//tempFormula=TempFormula
		public Assignment getTempFormulaAssignment() { return cTempFormulaAssignment; }
		
		//TempFormula
		public RuleCall getTempFormulaTempFormulaParserRuleCall_0() { return cTempFormulaTempFormulaParserRuleCall_0; }
	}
	public class WeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.Weight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegHyphenMinusKeyword_0_0 = (Keyword)cNegAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWIntAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cWIntWIntParserRuleCall_1_0_0 = (RuleCall)cWIntAssignment_1_0.eContents().get(0);
		private final Assignment cWFloatAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cWFloatWFloatParserRuleCall_1_1_0 = (RuleCall)cWFloatAssignment_1_1.eContents().get(0);
		
		//Weight:
		//	neg='-'? (wInt=WInt | wFloat=WFloat);
		@Override public ParserRule getRule() { return rule; }
		
		//neg='-'? (wInt=WInt | wFloat=WFloat)
		public Group getGroup() { return cGroup; }
		
		//neg='-'?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }
		
		//'-'
		public Keyword getNegHyphenMinusKeyword_0_0() { return cNegHyphenMinusKeyword_0_0; }
		
		//(wInt=WInt | wFloat=WFloat)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//wInt=WInt
		public Assignment getWIntAssignment_1_0() { return cWIntAssignment_1_0; }
		
		//WInt
		public RuleCall getWIntWIntParserRuleCall_1_0_0() { return cWIntWIntParserRuleCall_1_0_0; }
		
		//wFloat=WFloat
		public Assignment getWFloatAssignment_1_1() { return cWFloatAssignment_1_1; }
		
		//WFloat
		public RuleCall getWFloatWFloatParserRuleCall_1_1_0() { return cWFloatWFloatParserRuleCall_1_1_0; }
	}
	public class WIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.WInt");
		private final Assignment cIntAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_0 = (RuleCall)cIntAssignment.eContents().get(0);
		
		//WInt:
		//	int=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//int=INT
		public Assignment getIntAssignment() { return cIntAssignment; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_0() { return cIntINTTerminalRuleCall_0; }
	}
	public class WFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.WFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInt1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInt1INTTerminalRuleCall_0_0 = (RuleCall)cInt1Assignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInt2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInt2INTTerminalRuleCall_2_0 = (RuleCall)cInt2Assignment_2.eContents().get(0);
		
		//WFloat:
		//	int1=INT '.' int2=INT
		//	//	int1=INT '.' int2=('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')* @TODO fix 1.01
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//int1=INT '.' int2=INT
		public Group getGroup() { return cGroup; }
		
		//int1=INT
		public Assignment getInt1Assignment_0() { return cInt1Assignment_0; }
		
		//INT
		public RuleCall getInt1INTTerminalRuleCall_0_0() { return cInt1INTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//int2=INT
		public Assignment getInt2Assignment_2() { return cInt2Assignment_2; }
		
		//INT
		public RuleCall getInt2INTTerminalRuleCall_2_0() { return cInt2INTTerminalRuleCall_2_0; }
	}
	public class TempFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.TempFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cApAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cApAPParserRuleCall_0_0 = (RuleCall)cApAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFaTempFormulaParserRuleCall_1_2_0 = (RuleCall)cFaAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFoAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFoTempFormulaParserRuleCall_2_2_0 = (RuleCall)cFoAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cExclamationMarkExclamationMarkKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFnotAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFnotTempFormulaParserRuleCall_3_2_0 = (RuleCall)cFnotAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOp2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOp2OP2TerminalRuleCall_4_1_0 = (RuleCall)cOp2Assignment_4_1.eContents().get(0);
		private final Assignment cF1Assignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cF1TempFormulaParserRuleCall_4_2_0 = (RuleCall)cF1Assignment_4_2.eContents().get(0);
		private final Assignment cF2Assignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cF2TempFormulaParserRuleCall_4_3_0 = (RuleCall)cF2Assignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOpfAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOpfOPFTerminalRuleCall_5_1_0 = (RuleCall)cOpfAssignment_5_1.eContents().get(0);
		private final Assignment cFAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFTempFormulaParserRuleCall_5_2_0 = (RuleCall)cFAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cWKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cApAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cApAPParserRuleCall_6_2_0 = (RuleCall)cApAssignment_6_2.eContents().get(0);
		private final Assignment cWeightAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cWeightWeightParserRuleCall_6_3_0 = (RuleCall)cWeightAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cNextKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFNextAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFNextTempFormulaParserRuleCall_7_2_0 = (RuleCall)cFNextAssignment_7_2.eContents().get(0);
		private final Assignment cX1Assignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cX1WIntParserRuleCall_7_3_0 = (RuleCall)cX1Assignment_7_3.eContents().get(0);
		private final Assignment cX2Assignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cX2WIntParserRuleCall_7_4_0 = (RuleCall)cX2Assignment_7_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		
		//TempFormula:
		//	ap=AP
		//	| '(' '&&' fa+=TempFormula+ ')' | '(' '||' fo+=TempFormula+ ')' | '(' '!!' fnot=TempFormula ')' | '(' op2=OP2
		//	f1=TempFormula f2=TempFormula ')' | '(' opf=OPF f=TempFormula ')' | '(' 'w' ap=AP weight=Weight ')' | '(' 'next'
		//	fNext=TempFormula x1=WInt x2=WInt? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ap=AP | '(' '&&' fa+=TempFormula+ ')' | '(' '||' fo+=TempFormula+ ')' | '(' '!!' fnot=TempFormula ')' | '(' op2=OP2
		//f1=TempFormula f2=TempFormula ')' | '(' opf=OPF f=TempFormula ')' | '(' 'w' ap=AP weight=Weight ')' | '(' 'next'
		//fNext=TempFormula x1=WInt x2=WInt? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ap=AP
		public Assignment getApAssignment_0() { return cApAssignment_0; }
		
		//AP
		public RuleCall getApAPParserRuleCall_0_0() { return cApAPParserRuleCall_0_0; }
		
		//'(' '&&' fa+=TempFormula+ ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//fa+=TempFormula+
		public Assignment getFaAssignment_1_2() { return cFaAssignment_1_2; }
		
		//TempFormula
		public RuleCall getFaTempFormulaParserRuleCall_1_2_0() { return cFaTempFormulaParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'(' '||' fo+=TempFormula+ ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_2_1() { return cVerticalLineVerticalLineKeyword_2_1; }
		
		//fo+=TempFormula+
		public Assignment getFoAssignment_2_2() { return cFoAssignment_2_2; }
		
		//TempFormula
		public RuleCall getFoTempFormulaParserRuleCall_2_2_0() { return cFoTempFormulaParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'(' '!!' fnot=TempFormula ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'!!'
		public Keyword getExclamationMarkExclamationMarkKeyword_3_1() { return cExclamationMarkExclamationMarkKeyword_3_1; }
		
		//fnot=TempFormula
		public Assignment getFnotAssignment_3_2() { return cFnotAssignment_3_2; }
		
		//TempFormula
		public RuleCall getFnotTempFormulaParserRuleCall_3_2_0() { return cFnotTempFormulaParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' op2=OP2 f1=TempFormula f2=TempFormula ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//op2=OP2
		public Assignment getOp2Assignment_4_1() { return cOp2Assignment_4_1; }
		
		//OP2
		public RuleCall getOp2OP2TerminalRuleCall_4_1_0() { return cOp2OP2TerminalRuleCall_4_1_0; }
		
		//f1=TempFormula
		public Assignment getF1Assignment_4_2() { return cF1Assignment_4_2; }
		
		//TempFormula
		public RuleCall getF1TempFormulaParserRuleCall_4_2_0() { return cF1TempFormulaParserRuleCall_4_2_0; }
		
		//f2=TempFormula
		public Assignment getF2Assignment_4_3() { return cF2Assignment_4_3; }
		
		//TempFormula
		public RuleCall getF2TempFormulaParserRuleCall_4_3_0() { return cF2TempFormulaParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'(' opf=OPF f=TempFormula ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//opf=OPF
		public Assignment getOpfAssignment_5_1() { return cOpfAssignment_5_1; }
		
		//OPF
		public RuleCall getOpfOPFTerminalRuleCall_5_1_0() { return cOpfOPFTerminalRuleCall_5_1_0; }
		
		//f=TempFormula
		public Assignment getFAssignment_5_2() { return cFAssignment_5_2; }
		
		//TempFormula
		public RuleCall getFTempFormulaParserRuleCall_5_2_0() { return cFTempFormulaParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'(' 'w' ap=AP weight=Weight ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//'w'
		public Keyword getWKeyword_6_1() { return cWKeyword_6_1; }
		
		//ap=AP
		public Assignment getApAssignment_6_2() { return cApAssignment_6_2; }
		
		//AP
		public RuleCall getApAPParserRuleCall_6_2_0() { return cApAPParserRuleCall_6_2_0; }
		
		//weight=Weight
		public Assignment getWeightAssignment_6_3() { return cWeightAssignment_6_3; }
		
		//Weight
		public RuleCall getWeightWeightParserRuleCall_6_3_0() { return cWeightWeightParserRuleCall_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//'(' 'next' fNext=TempFormula x1=WInt x2=WInt? ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//'next'
		public Keyword getNextKeyword_7_1() { return cNextKeyword_7_1; }
		
		//fNext=TempFormula
		public Assignment getFNextAssignment_7_2() { return cFNextAssignment_7_2; }
		
		//TempFormula
		public RuleCall getFNextTempFormulaParserRuleCall_7_2_0() { return cFNextTempFormulaParserRuleCall_7_2_0; }
		
		//x1=WInt
		public Assignment getX1Assignment_7_3() { return cX1Assignment_7_3; }
		
		//WInt
		public RuleCall getX1WIntParserRuleCall_7_3_0() { return cX1WIntParserRuleCall_7_3_0; }
		
		//x2=WInt?
		public Assignment getX2Assignment_7_4() { return cX2Assignment_7_4; }
		
		//WInt
		public RuleCall getX2WIntParserRuleCall_7_4_0() { return cX2WIntParserRuleCall_7_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
	}
	public class APElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.AP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cPKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPNameIDTerminalRuleCall_4_0 = (RuleCall)cPNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AP:
		//	'(' '-' ('P' | 'p') '-' pName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' '-' ('P' | 'p') '-' pName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//('P' | 'p')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'P'
		public Keyword getPKeyword_2_0() { return cPKeyword_2_0; }
		
		//'p'
		public Keyword getPKeyword_2_1() { return cPKeyword_2_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//pName=ID
		public Assignment getPNameAssignment_4() { return cPNameAssignment_4; }
		
		//ID
		public RuleCall getPNameIDTerminalRuleCall_4_0() { return cPNameIDTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	private final ModelElements pModel;
	private final WeightElements pWeight;
	private final WIntElements pWInt;
	private final WFloatElements pWFloat;
	private final TempFormulaElements pTempFormula;
	private final TerminalRule tOP2;
	private final TerminalRule tOPF;
	private final APElements pAP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OltlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pWeight = new WeightElements();
		this.pWInt = new WIntElements();
		this.pWFloat = new WFloatElements();
		this.pTempFormula = new TempFormulaElements();
		this.tOP2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.OP2");
		this.tOPF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.pourhashem.xtext.oltl.Oltl.OPF");
		this.pAP = new APElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.pourhashem.xtext.oltl.Oltl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	tempFormula=TempFormula;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Weight:
	//	neg='-'? (wInt=WInt | wFloat=WFloat);
	public WeightElements getWeightAccess() {
		return pWeight;
	}
	
	public ParserRule getWeightRule() {
		return getWeightAccess().getRule();
	}
	
	//WInt:
	//	int=INT;
	public WIntElements getWIntAccess() {
		return pWInt;
	}
	
	public ParserRule getWIntRule() {
		return getWIntAccess().getRule();
	}
	
	//WFloat:
	//	int1=INT '.' int2=INT
	//	//	int1=INT '.' int2=('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')* @TODO fix 1.01
	//;
	public WFloatElements getWFloatAccess() {
		return pWFloat;
	}
	
	public ParserRule getWFloatRule() {
		return getWFloatAccess().getRule();
	}
	
	//TempFormula:
	//	ap=AP
	//	| '(' '&&' fa+=TempFormula+ ')' | '(' '||' fo+=TempFormula+ ')' | '(' '!!' fnot=TempFormula ')' | '(' op2=OP2
	//	f1=TempFormula f2=TempFormula ')' | '(' opf=OPF f=TempFormula ')' | '(' 'w' ap=AP weight=Weight ')' | '(' 'next'
	//	fNext=TempFormula x1=WInt x2=WInt? ')';
	public TempFormulaElements getTempFormulaAccess() {
		return pTempFormula;
	}
	
	public ParserRule getTempFormulaRule() {
		return getTempFormulaAccess().getRule();
	}
	
	//terminal OP2: //Propositional operators with 2 operands
	//	'->' | '<->' | 'until' | 'since' | 'release' | 'trigger';
	public TerminalRule getOP2Rule() {
		return tOP2;
	}
	
	//terminal OPF: //Temporal operators with 1 operands
	//	'next' | 'yesterday' | 'alw' | 'som' | 'alwf' | 'somf' | 'alwp' | 'somp';
	public TerminalRule getOPFRule() {
		return tOPF;
	}
	
	//AP:
	//	'(' '-' ('P' | 'p') '-' pName=ID ')';
	public APElements getAPAccess() {
		return pAP;
	}
	
	public ParserRule getAPRule() {
		return getAPAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
