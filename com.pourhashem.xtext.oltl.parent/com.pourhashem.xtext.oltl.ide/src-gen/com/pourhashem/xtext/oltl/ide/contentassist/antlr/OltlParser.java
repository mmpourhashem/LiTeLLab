/*
 * generated by Xtext 2.10.0
 */
package com.pourhashem.xtext.oltl.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.pourhashem.xtext.oltl.ide.contentassist.antlr.internal.InternalOltlParser;
import com.pourhashem.xtext.oltl.services.OltlGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class OltlParser extends AbstractContentAssistParser {

	@Inject
	private OltlGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalOltlParser createParser() {
		InternalOltlParser result = new InternalOltlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getWeightAccess().getAlternatives_1(), "rule__Weight__Alternatives_1");
					put(grammarAccess.getTempFormulaAccess().getAlternatives(), "rule__TempFormula__Alternatives");
					put(grammarAccess.getAPAccess().getAlternatives_2(), "rule__AP__Alternatives_2");
					put(grammarAccess.getWeightAccess().getGroup(), "rule__Weight__Group__0");
					put(grammarAccess.getWFloatAccess().getGroup(), "rule__WFloat__Group__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_1(), "rule__TempFormula__Group_1__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_2(), "rule__TempFormula__Group_2__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_3(), "rule__TempFormula__Group_3__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_4(), "rule__TempFormula__Group_4__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_5(), "rule__TempFormula__Group_5__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_6(), "rule__TempFormula__Group_6__0");
					put(grammarAccess.getTempFormulaAccess().getGroup_7(), "rule__TempFormula__Group_7__0");
					put(grammarAccess.getAPAccess().getGroup(), "rule__AP__Group__0");
					put(grammarAccess.getModelAccess().getTempFormulaAssignment(), "rule__Model__TempFormulaAssignment");
					put(grammarAccess.getWeightAccess().getNegAssignment_0(), "rule__Weight__NegAssignment_0");
					put(grammarAccess.getWeightAccess().getWIntAssignment_1_0(), "rule__Weight__WIntAssignment_1_0");
					put(grammarAccess.getWeightAccess().getWFloatAssignment_1_1(), "rule__Weight__WFloatAssignment_1_1");
					put(grammarAccess.getWIntAccess().getIntAssignment(), "rule__WInt__IntAssignment");
					put(grammarAccess.getWFloatAccess().getInt1Assignment_0(), "rule__WFloat__Int1Assignment_0");
					put(grammarAccess.getWFloatAccess().getInt2Assignment_2(), "rule__WFloat__Int2Assignment_2");
					put(grammarAccess.getTempFormulaAccess().getApAssignment_0(), "rule__TempFormula__ApAssignment_0");
					put(grammarAccess.getTempFormulaAccess().getFaAssignment_1_2(), "rule__TempFormula__FaAssignment_1_2");
					put(grammarAccess.getTempFormulaAccess().getFoAssignment_2_2(), "rule__TempFormula__FoAssignment_2_2");
					put(grammarAccess.getTempFormulaAccess().getFnotAssignment_3_2(), "rule__TempFormula__FnotAssignment_3_2");
					put(grammarAccess.getTempFormulaAccess().getOp2Assignment_4_1(), "rule__TempFormula__Op2Assignment_4_1");
					put(grammarAccess.getTempFormulaAccess().getF1Assignment_4_2(), "rule__TempFormula__F1Assignment_4_2");
					put(grammarAccess.getTempFormulaAccess().getF2Assignment_4_3(), "rule__TempFormula__F2Assignment_4_3");
					put(grammarAccess.getTempFormulaAccess().getOpfAssignment_5_1(), "rule__TempFormula__OpfAssignment_5_1");
					put(grammarAccess.getTempFormulaAccess().getFAssignment_5_2(), "rule__TempFormula__FAssignment_5_2");
					put(grammarAccess.getTempFormulaAccess().getApAssignment_6_2(), "rule__TempFormula__ApAssignment_6_2");
					put(grammarAccess.getTempFormulaAccess().getWeightAssignment_6_3(), "rule__TempFormula__WeightAssignment_6_3");
					put(grammarAccess.getTempFormulaAccess().getFNextAssignment_7_2(), "rule__TempFormula__FNextAssignment_7_2");
					put(grammarAccess.getTempFormulaAccess().getX1Assignment_7_3(), "rule__TempFormula__X1Assignment_7_3");
					put(grammarAccess.getTempFormulaAccess().getX2Assignment_7_4(), "rule__TempFormula__X2Assignment_7_4");
					put(grammarAccess.getAPAccess().getPNameAssignment_4(), "rule__AP__PNameAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalOltlParser typedParser = (InternalOltlParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OltlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OltlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
