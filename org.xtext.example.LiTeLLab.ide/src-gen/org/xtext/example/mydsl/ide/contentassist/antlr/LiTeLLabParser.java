/*
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalLiTeLLabParser;
import org.xtext.example.mydsl.services.LiTeLLabGrammarAccess;

public class LiTeLLabParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LiTeLLabGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LiTeLLabGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWeightAccess().getAlternatives_1(), "rule__Weight__Alternatives_1");
			builder.put(grammarAccess.getTempFormulaAccess().getAlternatives(), "rule__TempFormula__Alternatives");
			builder.put(grammarAccess.getTempTermAccess().getAlternatives(), "rule__TempTerm__Alternatives");
			builder.put(grammarAccess.getAPAccess().getAlternatives_2(), "rule__AP__Alternatives_2");
			builder.put(grammarAccess.getVARAccess().getAlternatives_2(), "rule__VAR__Alternatives_2");
			builder.put(grammarAccess.getWeightAccess().getGroup(), "rule__Weight__Group__0");
			builder.put(grammarAccess.getWFloatAccess().getGroup(), "rule__WFloat__Group__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_1(), "rule__TempFormula__Group_1__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_2(), "rule__TempFormula__Group_2__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_3(), "rule__TempFormula__Group_3__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_4(), "rule__TempFormula__Group_4__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_5(), "rule__TempFormula__Group_5__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_6(), "rule__TempFormula__Group_6__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_7(), "rule__TempFormula__Group_7__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_8(), "rule__TempFormula__Group_8__0");
			builder.put(grammarAccess.getTempFormulaAccess().getGroup_9(), "rule__TempFormula__Group_9__0");
			builder.put(grammarAccess.getAPAccess().getGroup(), "rule__AP__Group__0");
			builder.put(grammarAccess.getVARAccess().getGroup(), "rule__VAR__Group__0");
			builder.put(grammarAccess.getOldVARAccess().getGroup(), "rule__OldVAR__Group__0");
			builder.put(grammarAccess.getModelAccess().getTempFormulaAssignment(), "rule__Model__TempFormulaAssignment");
			builder.put(grammarAccess.getWeightAccess().getNegAssignment_0(), "rule__Weight__NegAssignment_0");
			builder.put(grammarAccess.getWeightAccess().getWIntAssignment_1_0(), "rule__Weight__WIntAssignment_1_0");
			builder.put(grammarAccess.getWeightAccess().getWFloatAssignment_1_1(), "rule__Weight__WFloatAssignment_1_1");
			builder.put(grammarAccess.getWIntAccess().getIntAssignment(), "rule__WInt__IntAssignment");
			builder.put(grammarAccess.getWFloatAccess().getInt1Assignment_0(), "rule__WFloat__Int1Assignment_0");
			builder.put(grammarAccess.getWFloatAccess().getInt2Assignment_2(), "rule__WFloat__Int2Assignment_2");
			builder.put(grammarAccess.getTempFormulaAccess().getApAssignment_0(), "rule__TempFormula__ApAssignment_0");
			builder.put(grammarAccess.getTempFormulaAccess().getFaAssignment_1_2(), "rule__TempFormula__FaAssignment_1_2");
			builder.put(grammarAccess.getTempFormulaAccess().getFoAssignment_2_2(), "rule__TempFormula__FoAssignment_2_2");
			builder.put(grammarAccess.getTempFormulaAccess().getFnotAssignment_3_2(), "rule__TempFormula__FnotAssignment_3_2");
			builder.put(grammarAccess.getTempFormulaAccess().getOp2Assignment_4_1(), "rule__TempFormula__Op2Assignment_4_1");
			builder.put(grammarAccess.getTempFormulaAccess().getF1Assignment_4_2(), "rule__TempFormula__F1Assignment_4_2");
			builder.put(grammarAccess.getTempFormulaAccess().getF2Assignment_4_3(), "rule__TempFormula__F2Assignment_4_3");
			builder.put(grammarAccess.getTempFormulaAccess().getOpfAssignment_5_1(), "rule__TempFormula__OpfAssignment_5_1");
			builder.put(grammarAccess.getTempFormulaAccess().getFAssignment_5_2(), "rule__TempFormula__FAssignment_5_2");
			builder.put(grammarAccess.getTempFormulaAccess().getApAssignment_6_2(), "rule__TempFormula__ApAssignment_6_2");
			builder.put(grammarAccess.getTempFormulaAccess().getWeightAssignment_6_3(), "rule__TempFormula__WeightAssignment_6_3");
			builder.put(grammarAccess.getTempFormulaAccess().getIapAssignment_7_2(), "rule__TempFormula__IapAssignment_7_2");
			builder.put(grammarAccess.getTempFormulaAccess().getWeightAssignment_7_3(), "rule__TempFormula__WeightAssignment_7_3");
			builder.put(grammarAccess.getTempFormulaAccess().getFNextAssignment_8_2(), "rule__TempFormula__FNextAssignment_8_2");
			builder.put(grammarAccess.getTempFormulaAccess().getX1Assignment_8_3(), "rule__TempFormula__X1Assignment_8_3");
			builder.put(grammarAccess.getTempFormulaAccess().getX2Assignment_8_4(), "rule__TempFormula__X2Assignment_8_4");
			builder.put(grammarAccess.getTempFormulaAccess().getCompAssignment_9_1(), "rule__TempFormula__CompAssignment_9_1");
			builder.put(grammarAccess.getTempFormulaAccess().getTt1Assignment_9_3(), "rule__TempFormula__Tt1Assignment_9_3");
			builder.put(grammarAccess.getTempFormulaAccess().getTt2Assignment_9_4(), "rule__TempFormula__Tt2Assignment_9_4");
			builder.put(grammarAccess.getTempTermAccess().getInt1Assignment_0(), "rule__TempTerm__Int1Assignment_0");
			builder.put(grammarAccess.getTempTermAccess().getVarAssignment_1(), "rule__TempTerm__VarAssignment_1");
			builder.put(grammarAccess.getTempTermAccess().getOldVarAssignment_2(), "rule__TempTerm__OldVarAssignment_2");
			builder.put(grammarAccess.getAPAccess().getPNameAssignment_4(), "rule__AP__PNameAssignment_4");
			builder.put(grammarAccess.getVARAccess().getVNameAssignment_4(), "rule__VAR__VNameAssignment_4");
			builder.put(grammarAccess.getOldVARAccess().getVarAssignment_2(), "rule__OldVAR__VarAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LiTeLLabGrammarAccess grammarAccess;

	@Override
	protected InternalLiTeLLabParser createParser() {
		InternalLiTeLLabParser result = new InternalLiTeLLabParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LiTeLLabGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LiTeLLabGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
