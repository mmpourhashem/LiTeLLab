/**
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.liTeLLab.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.liTeLLab.LiTeLLabPackage;
import org.xtext.example.mydsl.liTeLLab.TempTerm;
import org.xtext.example.mydsl.liTeLLab.VAR;
import org.xtext.example.mydsl.liTeLLab.oldVAR;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Temp Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.liTeLLab.impl.TempTermImpl#getInt1 <em>Int1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.liTeLLab.impl.TempTermImpl#getVar <em>Var</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.liTeLLab.impl.TempTermImpl#getOldVar <em>Old Var</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TempTermImpl extends MinimalEObjectImpl.Container implements TempTerm
{
  /**
   * The default value of the '{@link #getInt1() <em>Int1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInt1()
   * @generated
   * @ordered
   */
  protected static final int INT1_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInt1() <em>Int1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInt1()
   * @generated
   * @ordered
   */
  protected int int1 = INT1_EDEFAULT;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected VAR var;

  /**
   * The cached value of the '{@link #getOldVar() <em>Old Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOldVar()
   * @generated
   * @ordered
   */
  protected oldVAR oldVar;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TempTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LiTeLLabPackage.Literals.TEMP_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInt1()
  {
    return int1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInt1(int newInt1)
  {
    int oldInt1 = int1;
    int1 = newInt1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.TEMP_TERM__INT1, oldInt1, int1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VAR getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar(VAR newVar, NotificationChain msgs)
  {
    VAR oldVar = var;
    var = newVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.TEMP_TERM__VAR, oldVar, newVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(VAR newVar)
  {
    if (newVar != var)
    {
      NotificationChain msgs = null;
      if (var != null)
        msgs = ((InternalEObject)var).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.TEMP_TERM__VAR, null, msgs);
      if (newVar != null)
        msgs = ((InternalEObject)newVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.TEMP_TERM__VAR, null, msgs);
      msgs = basicSetVar(newVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.TEMP_TERM__VAR, newVar, newVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public oldVAR getOldVar()
  {
    return oldVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOldVar(oldVAR newOldVar, NotificationChain msgs)
  {
    oldVAR oldOldVar = oldVar;
    oldVar = newOldVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.TEMP_TERM__OLD_VAR, oldOldVar, newOldVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOldVar(oldVAR newOldVar)
  {
    if (newOldVar != oldVar)
    {
      NotificationChain msgs = null;
      if (oldVar != null)
        msgs = ((InternalEObject)oldVar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.TEMP_TERM__OLD_VAR, null, msgs);
      if (newOldVar != null)
        msgs = ((InternalEObject)newOldVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.TEMP_TERM__OLD_VAR, null, msgs);
      msgs = basicSetOldVar(newOldVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.TEMP_TERM__OLD_VAR, newOldVar, newOldVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.TEMP_TERM__VAR:
        return basicSetVar(null, msgs);
      case LiTeLLabPackage.TEMP_TERM__OLD_VAR:
        return basicSetOldVar(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.TEMP_TERM__INT1:
        return getInt1();
      case LiTeLLabPackage.TEMP_TERM__VAR:
        return getVar();
      case LiTeLLabPackage.TEMP_TERM__OLD_VAR:
        return getOldVar();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.TEMP_TERM__INT1:
        setInt1((Integer)newValue);
        return;
      case LiTeLLabPackage.TEMP_TERM__VAR:
        setVar((VAR)newValue);
        return;
      case LiTeLLabPackage.TEMP_TERM__OLD_VAR:
        setOldVar((oldVAR)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.TEMP_TERM__INT1:
        setInt1(INT1_EDEFAULT);
        return;
      case LiTeLLabPackage.TEMP_TERM__VAR:
        setVar((VAR)null);
        return;
      case LiTeLLabPackage.TEMP_TERM__OLD_VAR:
        setOldVar((oldVAR)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.TEMP_TERM__INT1:
        return int1 != INT1_EDEFAULT;
      case LiTeLLabPackage.TEMP_TERM__VAR:
        return var != null;
      case LiTeLLabPackage.TEMP_TERM__OLD_VAR:
        return oldVar != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (int1: ");
    result.append(int1);
    result.append(')');
    return result.toString();
  }

} //TempTermImpl
