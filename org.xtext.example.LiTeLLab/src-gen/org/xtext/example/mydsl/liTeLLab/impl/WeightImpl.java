/**
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.liTeLLab.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.liTeLLab.LiTeLLabPackage;
import org.xtext.example.mydsl.liTeLLab.WFloat;
import org.xtext.example.mydsl.liTeLLab.WInt;
import org.xtext.example.mydsl.liTeLLab.Weight;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Weight</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.liTeLLab.impl.WeightImpl#getNeg <em>Neg</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.liTeLLab.impl.WeightImpl#getWInt <em>WInt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.liTeLLab.impl.WeightImpl#getWFloat <em>WFloat</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WeightImpl extends MinimalEObjectImpl.Container implements Weight
{
  /**
   * The default value of the '{@link #getNeg() <em>Neg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeg()
   * @generated
   * @ordered
   */
  protected static final String NEG_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNeg() <em>Neg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeg()
   * @generated
   * @ordered
   */
  protected String neg = NEG_EDEFAULT;

  /**
   * The cached value of the '{@link #getWInt() <em>WInt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWInt()
   * @generated
   * @ordered
   */
  protected WInt wInt;

  /**
   * The cached value of the '{@link #getWFloat() <em>WFloat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWFloat()
   * @generated
   * @ordered
   */
  protected WFloat wFloat;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WeightImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LiTeLLabPackage.Literals.WEIGHT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNeg()
  {
    return neg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNeg(String newNeg)
  {
    String oldNeg = neg;
    neg = newNeg;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.WEIGHT__NEG, oldNeg, neg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WInt getWInt()
  {
    return wInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWInt(WInt newWInt, NotificationChain msgs)
  {
    WInt oldWInt = wInt;
    wInt = newWInt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.WEIGHT__WINT, oldWInt, newWInt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWInt(WInt newWInt)
  {
    if (newWInt != wInt)
    {
      NotificationChain msgs = null;
      if (wInt != null)
        msgs = ((InternalEObject)wInt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.WEIGHT__WINT, null, msgs);
      if (newWInt != null)
        msgs = ((InternalEObject)newWInt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.WEIGHT__WINT, null, msgs);
      msgs = basicSetWInt(newWInt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.WEIGHT__WINT, newWInt, newWInt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WFloat getWFloat()
  {
    return wFloat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWFloat(WFloat newWFloat, NotificationChain msgs)
  {
    WFloat oldWFloat = wFloat;
    wFloat = newWFloat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.WEIGHT__WFLOAT, oldWFloat, newWFloat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWFloat(WFloat newWFloat)
  {
    if (newWFloat != wFloat)
    {
      NotificationChain msgs = null;
      if (wFloat != null)
        msgs = ((InternalEObject)wFloat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.WEIGHT__WFLOAT, null, msgs);
      if (newWFloat != null)
        msgs = ((InternalEObject)newWFloat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LiTeLLabPackage.WEIGHT__WFLOAT, null, msgs);
      msgs = basicSetWFloat(newWFloat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LiTeLLabPackage.WEIGHT__WFLOAT, newWFloat, newWFloat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.WEIGHT__WINT:
        return basicSetWInt(null, msgs);
      case LiTeLLabPackage.WEIGHT__WFLOAT:
        return basicSetWFloat(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.WEIGHT__NEG:
        return getNeg();
      case LiTeLLabPackage.WEIGHT__WINT:
        return getWInt();
      case LiTeLLabPackage.WEIGHT__WFLOAT:
        return getWFloat();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.WEIGHT__NEG:
        setNeg((String)newValue);
        return;
      case LiTeLLabPackage.WEIGHT__WINT:
        setWInt((WInt)newValue);
        return;
      case LiTeLLabPackage.WEIGHT__WFLOAT:
        setWFloat((WFloat)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.WEIGHT__NEG:
        setNeg(NEG_EDEFAULT);
        return;
      case LiTeLLabPackage.WEIGHT__WINT:
        setWInt((WInt)null);
        return;
      case LiTeLLabPackage.WEIGHT__WFLOAT:
        setWFloat((WFloat)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LiTeLLabPackage.WEIGHT__NEG:
        return NEG_EDEFAULT == null ? neg != null : !NEG_EDEFAULT.equals(neg);
      case LiTeLLabPackage.WEIGHT__WINT:
        return wInt != null;
      case LiTeLLabPackage.WEIGHT__WFLOAT:
        return wFloat != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (neg: ");
    result.append(neg);
    result.append(')');
    return result.toString();
  }

} //WeightImpl
